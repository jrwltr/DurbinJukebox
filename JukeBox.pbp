;=============================================================================
;* JUKEBOX MENU DRUM CONTROLLER
;* JUKE.ASM - Code to run on MC68HC705J1A to control
;* title strip drum and credit/selection lights
;* 1-25-20     J. Walter, translated from assember into PIC Basic
;* 3-14-10     D. Durbin
;*
;=============================================================================
;*
;* Operational Description
;* The STEP UP/DN switches will move the menu drum for easier
;* title strip exchanges when the juke lid is open. Also, the
;* drum will not move via the select switches with the lid open.
;* The PROGRAM switch is used to set the position of the
;* menu drum. When the switch is set, the Program LED will
;* light. At this time the STEP UP and DOWN switches can be
;* used to position the drum so rows 1 & 2 are correctly
;* viewed in the window area with the left most Selection
;* switch pressed in. When the Program switch is turned
;* off, this value is stored in the EEPROM.
;* Then the Program LED is turned off.
;*
;* If programming is required, the STEP switches work as
;* follows.
;*  Pressing the UP switch moves the drum at a slow rate upward
;*   Movement stops when the switch is released.
;*  Pressing the DWN switch moves the drum at a slow rate downward
;*   Movement stops when the switch is released.
;*
;*  ** DO NOT RUN THE DRUM CONTINUOSLY FOR FUN, the position
;*       switches only have fifty thousand rotations of life. The
;*       motor switch turns at 5 times the rate of the drum switch.
;*
;* Normal operation on powerup is to turn on all 4 pricing lights
;* and sequence through the 5 selection lights for 250 msec each.
;* Then lights off. Then the EEPROM data for drum position is read.
;* The value from the EEPROM is used, correct or not. If things
;* appear erratic, follow the setup procedure above.
;* The drum position is checked against the EEPROM position
;* contents and selection switches and adjusted if
;* neccessary.
;*
;* The SPI interface is contained in the Xilinx CPLD. The
;* position switches output a grey code. This is converted
;* to straight binary code inside a pair of EPROMS, so the two
;* position switch registers read as direct binary sequences.
;* These switches are not sync'd mechanically with the drum
;* position, for instance '00h' is not any given drum position.
;* That is why the Program function exists.
;* When a selection switch is pressed, the drum will be rotated
;* in whichever direction is closest to the new switch position.
;*
;* PORTA is the data bus, PA0 is the LSB, PA7 is the MSB
;* Port B is the address and control port
;*                          ; PB0 through PB3 contain the Register address
        REG_SEL_ENB con $10 ; PB4 (acts as a chip select, active high)
        RD_WR_L     con $20 ; PB5 (selects RD - '1' or WR - '0')
;*
;* IRQ_L is an interrupt driven by any change to one of the five menu
;*       select buttons, the top lid openning, the program switch being
;*       set or a step change caused by pressing the up or down buttons.
;*       This is an active low input.
;=============================================================================

CLEAR       ; zero all variables

;=============================================================================
asm
    ERRORLEVEL -306  ;disable warning about crossing page boundary
endasm

;=============================================================================
#CONFIG
    __config _CONFIG1, _FEXTOSC_OFF & _RSTOSC_HFINTPLL & _CLKOUTEN_OFF & _CSWEN_OFF & _FCMEN_OFF
    __config _CONFIG2, _MCLRE_ON & _PWRTE_OFF & _LPBOREN_OFF & _BOREN_OFF & _BORV_LO & _ZCD_OFF & _PPS1WAY_OFF & _STVREN_ON & _DEBUG_OFF
    __config _CONFIG3, _WDTCPS_WDTCPS_11 & _WDTE_OFF & _WDTCWS_WDTCWS_7 & _WDTCCS_LFINTOSC
    __config _CONFIG4, _WRT_OFF & _SCANE_available & _LVP_OFF
    __config _CONFIG5, _CP_OFF & _CPD_OFF
#ENDCONFIG

;=============================================================================
; INITIALIZE REGISTERS:
OSCCON1 = %00000000   'Internal Osc set to 32MHz, clock determined by Config FOSC bits
ANSELA = %00000000    'Set all pins for digital operation
ANSELB = %00000000
ANSELC = %00000000

;=============================================================================
; INITIALIZE REGISTERS:
TRISA  = %11111111    'Set PORTB bits all inputs
TRISB  = %00000000    'Set PORTB bits all outputs
TRISC  = %00001100    'Set PORTC bits 2, 3 as input, all else outputs

;=============================================================================
; DEFINEs:
define OSC 32
define I2C_SLOW 1   'Enables using 100KHz I2C device with OSC above 8MHz
define WRITE_INT 1  'Disables interrupts during EEPROM writes

;=============================================================================
DISPLAY_I2C_ADDRESS     con $4E
EEPROM_I2C_ADDRESS      con $A0

I2C_CLK         var PORTC.0
I2C_DATA        var PORTC.1

INT_L           var PORTC.2

EEPROM_BYTES    con 16384

;=============================================================================
NUM_DRUM_POSITIONS  con 5
GEAR_SLOP           con 6

;=============================================================================
motor_position          var byte
motor_offset    var byte[NUM_DRUM_POSITIONS]
    ;* Register 0 - Drum, Motor Position, Read Only
    ;*     Motor position, a 360 degree 7-bit binary readout.
    ;*     This is actually an 8-bit gray code that is converted by
    ;*     EPROM to straight 7-bit binary.
    ;*     Count decreases as the menu drum rolls upward.
    ;*     The count rolls over from 00h to 7Fh.
    ;*     A new two-row section appears with each 360 degree rotation.
    ;*     This is used to position the selected menu section.

;=============================================================================
drum_position   var byte ;current drum position
drum_index      var byte
drum_offset     var byte[NUM_DRUM_POSITIONS]
    ;* Register 1 - Drum, Drum Position, Read Only
    ;*     Menu drum position, a 360 degree 7-bit binary readout.
    ;*     This is actually an 8-bit gray code that is converted by
    ;*     EPROM to straight 7-bit binary.
    ;*     Count increases as the menu drum rolls upward.
    ;*     The count rolls over from 7Fh to 00h.
    ;*     All five menu sections rotate through with each 360 degree rotation.
    ;*     This is used to go to the selected menu section.

;=============================================================================
lid_open        var byte
program_mode    var byte
    ;* Register 2 - Selector Switches, Read Only
    ;*     Selector switch inputs.
    ;*     Bits 0 to 4 are mutually exclusive. Active low signals.
    ;*     Bit 0 is menu section 1 (left most switch on the jukebox, rows 1&2)
    ;*     Bit 1 is menu section 2, rows 3&4
    ;*     Bit 2 is menu section 3, rows 5&6
    ;*     Bit 3 is menu section 4, rows 7&8
    ;*     Bit 4 is menu section 5 (right most switch on the jukebox, rows 9&0)
    ;*     Bit 5 is the top lid open signal. Active high.
    ;*     Bit 6 is the EEPROM Program switch. Active low.
    ;*     Bit 7 is the Step Change switch. Active high.
    R2_SELECT_SW_1  con $01
    R2_SELECT_SW_2  con $02
    R2_SELECT_SW_3  con $04
    R2_SELECT_SW_4  con $08
    R2_SELECT_SW_5  con $10
    R2_LID_OPEN     con $20
    R2_PROGRAM_SW   con $40

;=============================================================================
REG3_IM     var byte ;Ram mirror for data written to Reg 3
    ;* Register 3 - Interrupt Mask, Write Only
    ;*     Selector switch input interrupt mask.
    ;*     This register's bits are defined the same as Register 2.
    ;*         However, the complement of REG2 is put in Reg3.
    ;*         The respective bits of each register are exclusive OR'd and
    ;*         AND'd together to drive the interrupt input.
    ;*     Anytime this register's value is the same as register 2, an
    ;*     interrupt will be generated to the CPU.
    ;*     The normal way to use this register is to copy the complemented
    ;*     contents of register 2 into it. This will remove any interrupt. As
    ;*     an input is switched, two input bits will be the same and an interrupt
    ;*     will be generated. Setting register 3 to the complemented value of
    ;*     register 2 will remove the interrupt again.

;=============================================================================
    ;* Register 4 - Selector Lights, Write Only
    ;*     Bit 0 is EEPROM command is of short length, (EE_SHORT),'1'= 9-bit, '0'= 25-bit
    ;*     Bit 1 is not used
    ;*     Bit 2 is EEPROM ('1') or DAC ('0') Chip Select (EE_DA_L)
    ;*     Bit 3 is Select Light 1 (for left most switch on the jukebox), Active high.
    ;*     Bit 4 is Select Light 2  Active high.
    ;*     Bit 5 is Select Light 3  Active high.
    ;*     Bit 6 is Select Light 4  Active high.
    ;*     Bit 7 is Select Light 5 (for right most switch on the jukebox), Active high.

;=============================================================================
pricing_switches    var word
pricing_lights      var byte[NUM_DRUM_POSITIONS]
up_down_switch      var byte
    UPDWN_NONE  con 0
    UPDWN_UP    con 1
    UPDWN_DWN   con 2
    ;* Register 5 - Pricing Switches, Read Only
    ;*     Pricing switch inputs, '1' = 15 cents, '0' = 10 cents.
    ;*     Bit 0 is row 1
    ;*     Bit 1 is row 2
    ;*     Bit 2 is row 3
    ;*     Bit 3 is row 4
    ;*     Bit 4 is row 5
    ;*     Bit 5 is row 6
    ;*     Bit 6 is row 7
    ;*     Bit 7 is row 8
    ;* Register 6 - Pricing and Programming Switches, Read Only
    ;*     Pricing switch inputs, '1' = 15 cents, '0' = 10 cents.
    ;*     Bit 0 is row 9
    ;*     Bit 1 is row 0
    ;*     Bit 2 is not used, reads a '1'
    ;*     Bit 3 is not used, reads a '1'
    ;*     Bit 4 is not used, reads a '1'
    ;*     Bit 5 is not used, reads a '1'
    ;*     Bit 6 is the Step Up Switch input, STEP_UP_L, active low
    ;*     Bit 7 is the Step Down Switch input, STEP_DOWN_L, active low
    R6_UP_SWITCH    con $40
    R6_DOWN_SWITCH  con $80

;=============================================================================
register_7   var byte ;Ram mirror for data written to Reg 7
    ;* Register 7 - Pricing Lights, Programming LED and  , Write Only
    ;*     Bits 7 downto 3 are Selector Light outputs.
    ;*     Bit 0 is the Bottom Row 10 cent light, '1' = ON
    ;*     Bit 1 is the Bottom Row 15 cent light, '1' = ON
    ;*     Bit 2 is the Top Row 10 cent light, '1' = ON
    ;*     Bit 3 is the Top Row 15 cent light, '1' = ON
    ;*     Bit 4 is not used
    ;*     Bit 5 is the Programming LED, active low (PROG_LED_L)
    ;*     Bit 6 is the Menu Drum Enable, active high, (DRUM_ENB)
    ;*     Bit 7 is the Menu Drum Direction, '1' = Down, '0' = Up
    R7_BOTTOM_10    con 1
    R7_BOTTOM_15    con 2
    R7_TOP_10       con 4
    R7_TOP_15       con 8
    R7_ALL_LIGHTS   con $0f
    R7_PROGRAM_LED  con $20
    R7_DRUM_ENABLE  con $40
    R7_DRUM_DOWN    con $80

;=============================================================================
    ;* Register 8 - SPI TX_LO, write only, low byte of 24-bit
    ;*     transfer to the EEPROM, don't care for DAC

;=============================================================================
    ;* Register 9 - SPI TX_MID, write only, middle byte of 24-bit
    ;*     transfer to the EEPROM or DAC, this is the high data byte
    ;*     for the EEPROM and the only data byte for the DAC

;=============================================================================
    ;* Register 10 - SPI TX_HI, write only, high byte of 24-bit
    ;*     transfer to the EEPROM or DAC, this is the command
    ;*     byte for the EEPROM and the DAC
    ;*     ***** NOTE: The start bit for the EEPROM is done in hardware,
    ;*     do not put it in the command register.
    ;*     The command for reading address 32 would be 10110010 (B2)

;=============================================================================
    ;* Register 11 - SPI RX_LO, read only, low byte of 16-bit
    ;*     transfer from the EEPROM

;=============================================================================
    ;* Register 12 - SPI RX_HI, read only, high byte of 16-bit
    ;*     transfer from the EEPROM

;=============================================================================
    ;* Register 13 - SPI CNTL, read/write, Control and Status for
    ;*     the SPI transfer (Reads as 80h after reset)
    ;*     Bit 0 is TRANSFER, writing '1' to this bit starts an SPI transfer.
    ;*     Writing bits 1 to 7 has no effect.
    ;*     Bit 7 is DONE when read, '1' indicates the transfer is complete.
    ;*     Bits 0 to 6 all read as '0'.

;=============================================================================
register_address    var byte ;address of register to be accessed
register_data       var byte ;data written to or read from a register
program_switch      var bit  ;set non-zero when program switch is enabled
drum_moving         var bit  ;set non-zero when drum is moving
dac_value           var byte ;used to store data sent to DAC
    DAC_MOTOR_STOP      con $ff
    DAC_MOTOR_SLOW      con $c0
    DAC_MOTOR_FAST      con $90
    DAC_MOTOR_DOWN_STEP con 4
    DAC_MOTOR_UP_STEP   con 4
selector_switch     var byte ;current selection switch flag, 0=rows 1&2, .., 4=rows 9&0
temp_math           var byte
last_pricing_switches   var word

;=============================================================================
    goto init

#define DO_DISPLAY
#ifdef DO_DISPLAY
#define DO_4_LINE
INCLUDE "LCD4x20.pbp"
#endif
INCLUDE "EEPROM.pbp"

;=============================================================================
#ifdef DO_DISPLAY
display_update_needed   var     byte

#ifdef DO_DEBUG
        RampUpOffset    var byte
        RampUpPosition  var byte
        RampUpSpeed     var byte
        RampDownOffset    var byte
        RampDownPosition  var byte
        RampDownSpeed     var byte
#endif

display_update:
    display_update_needed = 0

    gosub display_clear

    DisplayRow = 0
    DisplayCol = 0
    gosub display_set_cursor

    ARRAYWRITE DisplayString, [ "SW", dec selector_switch, " ", 0]
    gosub display_write_string

    if (lid_open) then
        ARRAYWRITE DisplayString, [ "OPEN ", 0]
    else
        ARRAYWRITE DisplayString, [ "     ", 0]
    endif
    gosub display_write_string

    if up_down_switch = UPDWN_UP then
        ARRAYWRITE DisplayString, [ "Up ", 0]
    elseif up_down_switch = UPDWN_DWN then
        ARRAYWRITE DisplayString, [ "DWN", 0]
    else
        ARRAYWRITE DisplayString, [ "   ", 0]
    endif
    gosub display_write_string
    if drum_moving then
        if (register_7 & R7_DRUM_DOWN) then
            ARRAYWRITE DisplayString, [ "-", 0]
        else
            ARRAYWRITE DisplayString, [ "+", 0]
        endif
    else
        ARRAYWRITE DisplayString, [ " ", 0]
    endif
    gosub display_write_string

    ; Display current drum:motor position
    gosub read_drum_position
    gosub read_motor_position
    DisplayCol = 0
    DisplayRow = 1
    gosub display_set_cursor
    ARRAYWRITE DisplayString, [ "Current ", hex2 drum_position, ":", hex2 motor_position, 0]
    gosub display_write_string

    ; Display desired drum:motor position selected by the switches
    DisplayCol = 0
    DisplayRow = 2
    gosub display_set_cursor
    ARRAYWRITE DisplayString, [ "Desired ", hex2 drum_offset[selector_switch], ":", hex2 motor_offset[selector_switch], 0]
    gosub display_write_string

#ifdef DO_DEBUG
    DisplayCol = 0
    DisplayRow = 3
    gosub display_set_cursor
    ARRAYWRITE DisplayString, [ hex2 RampUpOffset, ":", hex2 RampUpPosition, 0]
    gosub display_write_string
    ARRAYWRITE DisplayString, [ " ", hex2 RampDownOffset, ":", hex2 RampDownPosition, 0]
    gosub display_write_string
    ARRAYWRITE DisplayString, [ " ", hex2 RampUpSpeed, ":", hex2 RampDownSpeed, 0]
    gosub display_write_string
#endif
    return
#endif

;=============================================================================
init:
    ; wait for jukebox reset to complete
    do
    loop until PORTC.3 = 1 

    pause 500

    last_pricing_switches = $ffff ; forces update of pricing_lights
    PORTB = RD_WR_L

#ifdef DO_DISPLAY
    gosub display_initialize
#endif

    gosub selector_lights_off

    gosub drum_stop

    ;turn on pricing lights and program LED
    register_7 = (register_7 & ~R7_PROGRAM_LED) + R7_ALL_LIGHTS
    gosub write_register_7

    ;sequence the selection lights for 1/4 second each
    for selector_switch = 0 to (NUM_DRUM_POSITIONS - 1)
        gosub write_selector_light
        pause 250
    next selector_switch

    ;turn off all lights
    register_7 = (register_7 & ~R7_ALL_LIGHTS) | R7_PROGRAM_LED
    gosub write_register_7
    gosub selector_lights_off

    ;read drum offsets from EEPROM
    for drum_index = 0 to (NUM_DRUM_POSITIONS - 1)
        ee_address = drum_index * 2
        gosub eeprom_read_byte
        ; clear high bit in case of uninitialized EEPROM that reads $ff
        drum_offset[drum_index] = ee_byte & $7f
        ee_address = ee_address + 1
        gosub eeprom_read_byte
        ; clear high bit in case of uninitialized EEPROM that reads $ff
        motor_offset[drum_index] = ee_byte & $7f
    next drum_index

;=============================================================================
#ifdef DO_DISPLAY
display_update_needed = 1
#endif
gosub read_all_switches
gosub build_drum_index_map
gosub compute_drum_index
gosub write_selector_light_from_drum_index
mainloop:
    if (lid_open) then
        if drum_moving then gosub drum_stop
        do
            ; lid open
            ; up/down step switches work to position drum
            ; program switch works to update position offset values in EEPROM
            if up_down_switch = UPDWN_UP then
                gosub enable_drum_up
                dac_value = DAC_MOTOR_SLOW
                gosub write_dac
            elseif up_down_switch = UPDWN_DWN then
                gosub enable_drum_down
                dac_value = DAC_MOTOR_SLOW
                gosub write_dac
            else
                if drum_moving then gosub drum_stop

                if (program_mode) = 0 then
                    program_switch = 1
                    gosub program_led_on
                elseif program_switch != 0 then
                    ; program switch was pressed and now is released
                    program_switch = 0

                    ;write drum position to EEPROM
                    gosub read_drum_position
                    ee_address = selector_switch * 2
                    ee_byte = drum_position
                    gosub eeprom_write_byte
                    ee_address = ee_address + 1
                    gosub read_motor_position
                    if (register_7 & R7_DRUM_DOWN) then
                        ; last move was down, adjust for gear slop
                        motor_position = (motor_position - GEAR_SLOP) & $7f
                    endif
                    ee_byte = motor_position
                    gosub eeprom_write_byte

                    drum_offset[selector_switch] = drum_position
                    motor_offset[selector_switch] = motor_position

                    gosub program_led_off
                endif
            endif
            gosub read_all_switches
#ifdef DO_DISPLAY
            if display_update_needed then
                gosub display_update
            endif
#endif
        loop until lid_open = 0
    endif
    ; lid closed
    gosub build_drum_index_map

    do
        gosub read_all_switches
        gosub compute_drum_index
        if (drum_index != selector_switch) then
            gosub move_drum
        endif

#ifdef DO_DISPLAY
        if display_update_needed then
            gosub display_update
        endif
#endif
    loop until lid_open
    goto mainloop

;=============================================================================
; drum_index_map is used to compute a drum_index position from the current
; drum_position.  It should be 128 bytes long but that won't fit in memory so
; it is 64 (DRUM_MAP_SIZE) bytes, hence the "/ 2" below.

DRUM_MAP_SIZE   con 64 ; must be a power of 2
drum_index_map  var byte[DRUM_MAP_SIZE]

compute_drum_index:
    gosub read_drum_position
    drum_index = drum_index_map[drum_position/2]
    return
 
build_drum_index_map:
    xx var byte

    ; initialize the drum_index_map with out-of-range values
    for xx = 0 to (DRUM_MAP_SIZE-1)
        drum_index_map[xx] = NUM_DRUM_POSITIONS
    next xx

    ; build the drum_index_map
    for drum_index = 0 to (NUM_DRUM_POSITIONS-1)
        xx = ((drum_offset[drum_index] - 12) & $7f) / 2;
        do
            drum_index_map[xx] = drum_index
            xx = (xx + 1) & (DRUM_MAP_SIZE-1)
        loop until xx = (((drum_offset[drum_index] + 12) & $7f) / 2)
    next drum_index

    ; look for uninitialized locations in the map and fix them
    for xx = 0 to (DRUM_MAP_SIZE-1)
        if (drum_index_map[xx] = NUM_DRUM_POSITIONS) then
            yy var byte
            yy = xx
            do
                yy = (yy + 1) & (DRUM_MAP_SIZE-1)
            loop until drum_index_map[yy] != NUM_DRUM_POSITIONS
            drum_index_map[xx] = drum_index_map[yy]
        endif
    next xx

    return

;=============================================================================
move_drum:
    ;determine direction
    if drum_index < selector_switch then
        if (selector_switch - drum_index) < 3 then
            gosub enable_drum_up
        else
            gosub enable_drum_down
        endif
    else
        if (drum_index - selector_switch) < 3 then
            gosub enable_drum_down
        else
            gosub enable_drum_up
        endif
    endif

    ;ramp up motor and wait til we're in the ball park
    last_value      var byte
    no_change_count var byte
    dac_value = DAC_MOTOR_SLOW + DAC_MOTOR_UP_STEP
    PIR0.5 = 1
    gosub read_drum_position
    last_value = drum_position
    no_change_count = 0
    do
        if ((dac_value != DAC_MOTOR_FAST) and PIR0.5) then
            dac_value = dac_value - DAC_MOTOR_UP_STEP
            gosub write_dac
            gosub start_8_millisecond_timer
        endif

        gosub compute_drum_index
        gosub write_selector_light_from_drum_index

        if ((dac_value = DAC_MOTOR_FAST) and PIR0.5) then
            if last_value != drum_position then
                no_change_count = 0
                last_value = drum_position
            else
                no_change_count = no_change_count + 1
                if no_change_count >= 128 then
                    ; drum appears to be stalled
                    gosub drum_stop
                    gosub stop_timer
                    return
                endif
            endif
            gosub start_8_millisecond_timer
        endif
#ifdef DO_DEBUG
        RampUpOffset = drum_offset[selector_switch]
        RampUpPosition = drum_position
        RampUpSpeed = dac_value
#endif
        temp_math = drum_offset[selector_switch] - drum_position
        if (temp_math & $80) then
            temp_math = ~temp_math + 1
        endif
    loop until temp_math < 10
    gosub stop_timer

    ;ramp down and stop when we hit the target
    PIR0.5 = 1
    gosub read_motor_position
    last_value = motor_position
    no_change_count = 0
    do
        if (dac_value != DAC_MOTOR_SLOW) and PIR0.5 then
            dac_value = dac_value + DAC_MOTOR_DOWN_STEP
            gosub write_dac
            gosub start_8_millisecond_timer
        endif

        gosub read_motor_position
        if ((dac_value = DAC_MOTOR_SLOW) and PIR0.5) then
            if last_value != motor_position then
                no_change_count = 0
                last_value = motor_position
            else
                no_change_count = no_change_count + 1
                if no_change_count >= 128 then
                    ; motor appears to be stalled
                    gosub drum_stop
                    gosub stop_timer
                    return
                endif
            endif
            gosub start_8_millisecond_timer
        endif
#ifdef DO_DEBUG
        RampDownOffset = motor_offset[selector_switch]
        RampDownPosition = motor_position
        RampDownSpeed  = dac_value
#endif
        if (register_7 & R7_DRUM_DOWN) then
            temp_math = motor_position - ((motor_offset[selector_switch] + GEAR_SLOP) & $7f)
        else
            temp_math = motor_position - motor_offset[selector_switch]
        endif
        if (temp_math & $80) then
            temp_math = ~temp_math + 1
        endif
    loop until temp_math < 2
    goto drum_stop
    gosub stop_timer
    return

;=============================================================================
start_8_millisecond_timer:
    ; initialize timer 0 for 8 milliseconds and start it
    T0CON0 = $00 ; T0CON0.T0EN = 0  disable timer
    TMR0H = $ff  ; timer 0 8 bit comparator value
    TMR0L = 0    ; timer 0 counter starts at zero
    T0CON1 = $6a ; T0CON1.TOCS<2:0>=HFINTOSC, T0CON1.T0ASYNC=0, T0CON1.T0CKPS<3:0>=$a (1:1024 prescaler)
    PIR0.5 = 0   ; PIR0.TMR0IF = 0  clear timer 0 interrupt flag
    T0CON0 = $80 ; T0CON0.T0EN = 1  enable timer
    return

stop_timer:
    T0CON0 = $00 ; T0CON0.T0EN = 0  disable timer
    PIR0.5 = 0   ; PIR0.TMR0IF = 0  clear timer 0 interrupt flag
    return

;=============================================================================
drum_stop:
    dac_value = DAC_MOTOR_STOP
    gosub write_dac
    gosub disable_drum
    gosub read_motor_position
    gosub read_drum_position
#ifdef DO_DISPLAY
    display_update_needed = 1
#endif
    drum_moving = 0
    return

;=============================================================================
write_dac:                          ;receives data in dac_value
    register_address =  10
    register_data = 3        ;set up to load both channels A & B
    gosub write_register

    register_address =  9
    register_data = dac_value
    gosub write_register

    register_address = 13     ;set spi start bit
    register_data = 1
    gosub write_register
    pauseus 16 * 5 ; wait 5 microseconds per bit

    if dac_value != DAC_MOTOR_STOP then
        drum_moving = 1
    endif
    return

;=============================================================================
read_register:
    PORTB = register_address | RD_WR_L
    PORTB = register_address | RD_WR_L | REG_SEL_ENB
    pauseus 1 ;give some extra time for data to be valid
    register_data = PORTA
    PORTB = register_address
    return

;=============================================================================
read_motor_position:
    register_address = 0
    gosub read_register
    motor_position = register_data
    do
        gosub read_register
        if register_data = motor_position then
            exit
        endif
        motor_position = register_data
    loop until 0
    return

;=============================================================================
read_drum_position:
    register_address = 1
    gosub read_register
    drum_position = register_data
    return

;=============================================================================
previous_value          var byte ;for debounce of selector switches
debounce_counter        var byte
last_reg2_value         var byte
last_up_down_switch     var byte

read_all_switches:
    register_address = 2
    gosub read_register
    if register_data != previous_value then
        previous_value = register_data
        debounce_counter = 0
        do
            pause 1
            gosub read_register
            if previous_value != register_data then
                previous_value = register_data
                debounce_counter = 0
            else
                debounce_counter = debounce_counter + 1
            endif
        loop until debounce_counter = 200
    endif

    if register_data != last_reg2_value then
        last_reg2_value = register_data
#ifdef DO_DISPLAY
        display_update_needed = 1
#endif
        if     (register_data & R2_SELECT_SW_1) = 0 then
            ;position switch 1_2 is closed
            selector_switch = 0
        elseif (register_data & R2_SELECT_SW_2) = 0 then
            ;position switch 3_4 is closed
            selector_switch = 1
        elseif (register_data & R2_SELECT_SW_3) = 0 then
            ;position switch 5_6 is closed
            selector_switch = 2
        elseif (register_data & R2_SELECT_SW_4) = 0 then
            ;position switch 7_8 is closed
            selector_switch = 3
        else
            ;position switch 9_0 must be closed
            selector_switch = 4
        endif
        if (register_data & R2_LID_OPEN) then
            lid_open = 1
        else
            lid_open = 0
        endif
        if (register_data & R2_PROGRAM_SW) then
            program_mode = 1
        else
            program_mode = 0
        endif
        if lid_open then gosub write_selector_light
        gosub write_pricing_lights_based_on_selector_switch
    endif

    register_address = 5
    gosub read_register
    pricing_switches = register_data

    register_address = 6
    gosub read_register
    pricing_switches = pricing_switches | ((register_data & 3) << 8)

    if (register_data & R6_UP_SWITCH) = 0 then
        up_down_switch = UPDWN_UP
    elseif (register_data & R6_DOWN_SWITCH) = 0 then
        up_down_switch = UPDWN_DWN
    else
        up_down_switch = UPDWN_NONE
    endif

    if last_pricing_switches != pricing_switches then
        last_pricing_switches = pricing_switches
        for drum_index = 0 to (NUM_DRUM_POSITIONS-1)
            if     (((pricing_switches >> (drum_index * 2)) & 3) = 0) then
                pricing_lights[drum_index] = R7_TOP_10 + R7_BOTTOM_10
            elseif (((pricing_switches >> (drum_index * 2)) & 3) = 1) then
                pricing_lights[drum_index] = R7_TOP_15 + R7_BOTTOM_10
            elseif (((pricing_switches >> (drum_index * 2)) & 3) = 2) then
                pricing_lights[drum_index] = R7_TOP_10 + R7_BOTTOM_15
            else
                pricing_lights[drum_index] = R7_TOP_15 + R7_BOTTOM_15
            endif
        next drum_index
        gosub write_pricing_lights_based_on_selector_switch
    endif

    if last_up_down_switch != up_down_switch then
        last_up_down_switch = up_down_switch
#ifdef DO_DISPLAY
        display_update_needed = 1
#endif
    endif

    return

;=============================================================================
program_led_off:
    register_7 = register_7 | R7_PROGRAM_LED
    goto write_register_7

program_led_on:
    register_7 = register_7 & ~R7_PROGRAM_LED
    goto write_register_7

enable_drum_up:
    register_7 = (register_7 & ~R7_DRUM_DOWN) | R7_DRUM_ENABLE
    goto write_register_7

enable_drum_down:
    register_7 = register_7 | (R7_DRUM_ENABLE | R7_DRUM_DOWN)
    goto write_register_7

disable_drum:
    register_7 = (register_7 & ~R7_DRUM_ENABLE) ;disable drive to drum
    goto write_register_7

write_pricing_lights_based_on_selector_switch:
    register_7 = (register_7 & ~R7_ALL_LIGHTS) | pricing_lights[selector_switch]
    goto write_register_7

write_register_7:
    register_address =  7
    register_data = register_7
    goto write_register

;=============================================================================
selector_lights_off:
    register_data = 0
    goto write_register_4
write_selector_light:
    register_data = 8 << selector_switch
    goto write_register_4
write_selector_light_from_drum_index:
    register_data = 8 << drum_index
write_register_4:
    register_address = 4
    goto write_register

;=============================================================================
write_register:
    PORTB = register_address
    PORTB = register_address | REG_SEL_ENB
    PORTA = register_data ;store data to be put on bus
    TRISA = $00 ; PORTA all outputs
    PORTB = register_address
    TRISA = $ff ; PORTA all inputs
    return

;=============================================================================

    End

